package integral

import (
	"errors"
)

// GaussLegendreIntegral вычисляет интеграл функции f от a до b
// с использованием квадратуры Гаусса-Лежандра с n узлами.
// Функция f принимает map[string]float64 (например, для параметрических функций).
func GaussLegendre(a, b float64, n float64, f func(vars map[string]float64) float64) (float64, error) {
	// Проверка корректности n
	if n < 1 || n > 10 {
		return 0, errors.New("n must be between 1 and 10")
	}

	// Узлы и веса Гаусса-Лежандра для n от 1 до 10
	nodes, weights, err := getGaussLegendreNodesWeights(int(n))
	if err != nil {
		return 0, err
	}

	// Линейное преобразование из [a, b] в [-1, 1]
	scale := (b - a) / 2
	shift := (a + b) / 2

	// Вычисление интеграла
	integral := 0.0
	for i := 0; i < int(n); i++ {
		x := scale*nodes[i] + shift
		integral += weights[i] * f(map[string]float64{"x": x})
	}
	integral *= scale

	return integral, nil
}

// getGaussLegendreNodesWeights возвращает узлы и веса для заданного n.
func getGaussLegendreNodesWeights(n int) ([]float64, []float64, error) {
	switch n {
	case 1:
		return []float64{0}, []float64{2}, nil
	case 2:
		return []float64{
				-0.5773502691896257,
				0.5773502691896257,
			},
			[]float64{
				1.0,
				1.0,
			}, nil
	case 3:
		return []float64{
				-0.7745966692414834,
				0,
				0.7745966692414834,
			},
			[]float64{
				0.5555555555555556,
				0.8888888888888888,
				0.5555555555555556,
			}, nil
	case 4:
		return []float64{
				-0.8611363115940526,
				-0.3399810435848563,
				0.3399810435848563,
				0.8611363115940526,
			},
			[]float64{
				0.3478548451374538,
				0.6521451548625461,
				0.6521451548625461,
				0.3478548451374538,
			}, nil
	case 5:
		return []float64{
				-0.9061798459386640,
				-0.5384693101056831,
				0,
				0.5384693101056831,
				0.9061798459386640,
			},
			[]float64{
				0.2369268850561891,
				0.4786286704993665,
				0.5688888888888889,
				0.4786286704993665,
				0.2369268850561891,
			}, nil
	case 6:
		return []float64{
				-0.9324695142031521,
				-0.6612093864662645,
				-0.2386191860831969,
				0.2386191860831969,
				0.6612093864662645,
				0.9324695142031521,
			},
			[]float64{
				0.1713244923791704,
				0.3607615730481386,
				0.4679139345726910,
				0.4679139345726910,
				0.3607615730481386,
				0.1713244923791704,
			}, nil
	case 7:
		return []float64{
				-0.9491079123427585,
				-0.7415311855993945,
				-0.4058451513773972,
				0,
				0.4058451513773972,
				0.7415311855993945,
				0.9491079123427585,
			},
			[]float64{
				0.1294849661688697,
				0.2797053914892766,
				0.3818300505051189,
				0.4179591836734694,
				0.3818300505051189,
				0.2797053914892766,
				0.1294849661688697,
			}, nil
	case 8:
		return []float64{
				-0.9602898564975363,
				-0.7966664774136267,
				-0.5255324099163290,
				-0.1834346424956498,
				0.1834346424956498,
				0.5255324099163290,
				0.7966664774136267,
				0.9602898564975363,
			},
			[]float64{
				0.1012285362903763,
				0.2223810344533745,
				0.3137066458778873,
				0.3626837833783620,
				0.3626837833783620,
				0.3137066458778873,
				0.2223810344533745,
				0.1012285362903763,
			}, nil
	case 9:
		return []float64{
				-0.9681602395076261,
				-0.8360311073266358,
				-0.6133714327005904,
				-0.3242534234038089,
				0,
				0.3242534234038089,
				0.6133714327005904,
				0.8360311073266358,
				0.9681602395076261,
			},
			[]float64{
				0.0812743883615744,
				0.1806481606948574,
				0.2606106964029354,
				0.3123470770400029,
				0.3302393550012598,
				0.3123470770400029,
				0.2606106964029354,
				0.1806481606948574,
				0.0812743883615744,
			}, nil
	case 10:
		return []float64{
				-0.9739065285171717,
				-0.8650633666889845,
				-0.6794095682990244,
				-0.4333953941292472,
				-0.1488743389816312,
				0.1488743389816312,
				0.4333953941292472,
				0.6794095682990244,
				0.8650633666889845,
				0.9739065285171717,
			},
			[]float64{
				0.0666713443086881,
				0.1494513491505806,
				0.2190863625159820,
				0.2692667193099963,
				0.2955242247147529,
				0.2955242247147529,
				0.2692667193099963,
				0.2190863625159820,
				0.1494513491505806,
				0.0666713443086881,
			}, nil
	default:
		return nil, nil, errors.New("n must be between 1 and 10")
	}
}
